AWSTemplateFormatVersion: "2010-09-09"

Description: "This template will create an EC2 instance and other infrastrucure elements"

Parameters:
  vpcCidr:
    Description: "Give IP Range"
    Type: String
    Default: 10.0.0.0/16

  amiId:
    Description: "Id of custom ami"
    Type: String

  paramPublicSubnet1:
    Description: "Give IP Range for public subnet 1"
    Type: String
    Default: 10.0.1.0/24
  paramPublicSubnet2:
    Description: "Give IP Range for public subnet 2"
    Type: String
    Default: 10.0.2.0/24
    
  paramPublicSubnet3:
    Description: "Give IP Range for public subnet 3"
    Type: String
    Default: 10.0.3.0/24
  
  paramPrivateSubnet1:
    Description: "Give IP Range for privat subnet 1"
    Type: String
    Default: 10.0.4.0/24
  paramPrivateSubnet2:
    Description: "Give IP Range for private subnet 2"
    Type: String
    Default: 10.0.5.0/24
    
  paramPrivateSubnet3:
    Description: "Give IP Range for private subnet 3"
    Type: String
    Default: 10.0.6.0/24

     

  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '10'
    MaxValue: '30'
    ConstraintDescription: must be between 2 and 30 GiB.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: !Ref vpcCidr
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: !Join [ "_", [ "VPC", !Ref AWS::StackName ] ]

# b) Create a Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "_", [ "InternetGateway", !Ref AWS::StackName ] ]
        
        
# c) Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:      
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
# a) Create a public route table for the VPC (will be public once it is associated with the Internet Gateway)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PublicRouteTable", !Ref AWS::StackName ] ]
          
  # b) Associate the public route table with the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
      

# c) Create a public subnet in AZ 1 (will be public once it is associated with public route table)
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # AZ 1
      CidrBlock: !Ref paramPublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet1", !Ref AWS::StackName ] ]
  # Create a public subnet in AZ 2 (will be public once it is associated with public route table)
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] # AZ 2
      CidrBlock: !Ref paramPublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet2", !Ref AWS::StackName ] ]
# Create a public subnet in AZ 3 (will be public once it is associated with public route table)
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ] # AZ 3
      CidrBlock: !Ref paramPublicSubnet3
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet3", !Ref AWS::StackName ] ]      
 
  # d) Associate the public route table with the public subnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1
  # Associate the public route table with the public subnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2 
      
   # Associate the public route table with the public subnet3
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet3

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group for EC2"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
            - Key: Name
              Value: !Join [ "_", [ "SecurityGroup", !Ref AWS::StackName ] ]
      VpcId: !Ref VPC
  
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId:  !Ref amiId
      InstanceType: t2.micro
      SecurityGroupIds: 
      - !Ref SecurityGroup
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1 
        Ebs:
            DeleteOnTermination: true
            VolumeSize: 50
            VolumeType: gp2
      SubnetId: !Ref Subnet1
      Tags:
            - Key: Name
              Value: !Join [ "_", [ "EC2", !Ref AWS::StackName ] ]
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            sudo echo "DB_Name=\"csye6225\"" >> /home/ubuntu/.env
            sudo echo "DB_User=\"csye6225\"" >> /home/ubuntu/.env
            sudo echo "DB_Pass=\"sagar2212db\"" >> /home/ubuntu/.env
            sudo echo "S3_Name=${S3Bucket}" >> /home/ubuntu/.env
            sudo echo "DB_host=${DatabaseMysql.Endpoint.Address}" >> /home/ubuntu/.env
      IamInstanceProfile: !Ref Ec2InstanceProfile
# Private route table ---------------
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateRouteTable", !Ref AWS::StackName ] ]


#d) Associate the private route table with the Nat Gateway in AZ 1
  # myPrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref myPrivateRouteTable
  #     DestinationCidrBlock: ${EC2Instance.PublicIp}
  #     GatewayId: !Ref InternetGateway 
### check gateway or interna gateway for private route
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # AZ 1
      CidrBlock: !Ref paramPrivateSubnet1
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet1", !Ref AWS::StackName ] ]
  # Create a private subnet in AZ 2
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] # AZ 2
      CidrBlock: !Ref paramPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet2", !Ref AWS::StackName ] ]

  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ] # AZ 3
      CidrBlock: !Ref paramPrivateSubnet3
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet3", !Ref AWS::StackName ] ]

  # f) Associate the private route table with the private subnet in AZ 1
  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet1
  #  Associate the private route table with the private subnet in AZ 2
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet2

  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet3

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group for Database"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "DatabaseSecurityGroup", !Ref AWS::StackName ] ]
      VpcId: !Ref VPC
        # - IpProtocol: tcp
        #   FromPort: 3306
        #   ToPort: 3306
        #   CidrIp: 10.0.1.0/24
        #   #SourceSecurityGroupId: !Ref SecurityGroup


# check s3 non empty delete=================================
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption:  
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName: !Join [ "", [ "prods3bucket", !Ref AWS::StackName ] ]
      LifecycleConfiguration:
        Rules:
          - Id: S3Lifecycle
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365
      Tags:
        - Key: Name
          Value: !Join [ "", [ "prods3bucket", !Ref AWS::StackName ] ]

  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "DBParameterGroup", !Ref AWS::StackName ] ]
  DatabaseMysql:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: 'csye6225'
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Join [ "", [ "csye6225", !Ref AWS::StackName ] ]
      MultiAZ: False
      Engine: MySQL
      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup
      MasterUsername: 'csye6225'
      MasterUserPassword: 'sagar2212db'
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      PubliclyAccessible: False
      
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Db Subnet Group"
      DBSubnetGroupName: !Join [ "_", [ "dbsubnetgroup", !Ref AWS::StackName ] ]
      SubnetIds: 
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
        - !Ref myPrivateSubnet3
      


  WebAppS3:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObjectAcl"
              - "s3:GetObject"
              - "s3:DeleteObjectVersion"
              - "s3:ListBucket"
              - "s3:DeleteObject"
              - "s3:GetBucketLocation"
              - "s3:PutObjectAcl"
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket,"/*" ] ]
              - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket ] ]
  
  EC2CSYE6225:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref WebAppS3
      RoleName: !Join [ "_", ["EC2-CSYE6225", !Ref AWS::StackName ] ]

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Join [ "_", ["Ec2InstanceProfile", !Ref AWS::StackName ] ]
      Path: "/"
      Roles: 
       - !Ref EC2CSYE6225
      



    
    

  



    


    

  
  
    
    
   
